# NAME MATCH PROPERTIES

# maximum difference for two strings to be compared
# value > 0 
threshold.lenght=5

# overall threshold for similarity of two names to be accepted as a match
# value in [0,1]
threshold=0.75

# minimum value for similarity for declaring two strings to be the same with respect to misspellings
# value in [0,1]
threshold.misspellings=0.75

# minimum value for similarity for declaring two strings are variant of each other
# (using a dictionary lookup) with respect to misspellings
# value in [0,1]
threshold.dictionary=${threshold.misspellings}

# minimum value for similarity for declaring two strings are variant 
# of each other using a token analysis
# value in [0,1]
threshold.token=${threshold.misspellings}

# name of the comparator used for computing the edit distance for two strings
# value in {'JaroWinkler', 'LevenstheinDamearau'}
misspellings.comparator=JaroWinkler


# NAME SEARCH PROPERTIES

# weight given to results of searchEquals function
# value in [0,1]
search.weight.equals=1.0

# weight given to results of searchReordered function
# value in [0,1]
search.weight.reorder=0.8

# maximum number of results retrieved from the search between 
# top ranked results for the query
# value > 0
search.nrresult.top=5

# maximum number of result displayed
# value > 0
search.nrresult=15

# minimum number of character for a single token to be searched
# in the database
# value >= 0
search.token.minlength=2




# flag for performing a fast dataset testing
# determine wheter the all token combination similarity shold be applied or not
# value true / false
test.fasttest=true




# PREFIX SEARCH PROPERTIES

# flag for normalizing or not the special characters in the input string.
# if set to true, converts accents to normal letter etc.
# if set to false, leaves the string as it's given
# value true / false
prefix.normalize=true



# DATASET PROPERTIES
dataset.directory=src/main/resources/dataset

# path for xls file containing the dataset with entity name,
# variant and variations
dataset.original.xls=${dataset.directory}/DataSet.xls

# path for xml file containing the dataset in xml format
# the file is obtained throug jaxb marshalling of the xls dataset
# classes can be found in it.disi.unitn.sweb.names.utils.dataset. Root class: Dataset
dataset.original.xml=${dataset.directory}/dataset.xml

# path for file containing the original dataset extended with a set
# of match test (called matchEntry). Each entry has 2 names and an expected
# result (true / false if they match or not)
dataset.matched.xml=${dataset.directory}/datasetMatch.xml

# path for file where the dataset evaluation results are stored.
dataset.evaluated.xml=${dataset.directory}/datasetResult.xml

dataset.matched.search.xml=${dataset.directory}/datasetMatchSearch.xml

# flag which determines if the names of etype person will be extracted from the
# xls dataset file
dataset.extract.person=true

# flag which determines if the names of etype location will be extracted from the
# xls dataset file
dataset.extract.location=false

# flag which determines if the names of etype organization will be extracted from the
# xls dataset file
dataset.extract.organization=false

# percentage of random match entries generated for the dataset.
# Random entries are the ones between two names that do not belong to
# the same entity. Such match entries are generated randomly
# value > 0
dataset.matched.randompercentage=0.01

dataset.external.original=${dataset.directory}/census.txt
dataset.external.xml=${dataset.directory}/census.xml
dataset.external.matched.xml=${dataset.directory}/censusMatch.xml
dataset.external.evaluated.xml=${dataset.directory}/censusResult.xml
dataset.external.use=false

# file for comparing time executions of different match functions
result.xls=${dataset.directory}/result.xls
result.csv=${dataset.directory}/result.csv



